<EditForm Model="Model" OnValidSubmit="Submit">
    <FluentValidationValidator @ref="_fluentValidationValidator"/>
    <MudDialog>

        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icon" Class="mr-3 mb-n1" />
                @Title
            </MudText>
        </TitleContent>

        <DialogContent>
            @Content
        </DialogContent>

        <DialogActions>
            <MudButton DisableElevation Variant="Variant.Text" OnClick="Cancel">CANCELAR</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Success" ButtonType="ButtonType.Submit" Disabled="@(!Validated)">
                GUARDAR
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {
    [CascadingParameter]
    private MudDialogInstance _mudDialog { get; set; }

    [Parameter]
    public RenderFragment Content { get; set; }

    [Parameter]
    public RenderFragment Title { get; set; }

    [Parameter]
    public string Icon { get; set; }

    [Parameter]
    public object Model { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private FluentValidationValidator _fluentValidationValidator;

    private bool Validated => _fluentValidationValidator.Validate(options => { options.IncludeAllRuleSets(); });

    private async Task Submit()
    {
        await OnValidSubmit.InvokeAsync();
    }

    private void Cancel()
    {
        _mudDialog.Cancel();
    }
}